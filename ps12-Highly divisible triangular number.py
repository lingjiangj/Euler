# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

# Let us list the factors of the first seven triangle numbers:

 # 1: 1
 #  3: 1,3
 # 6: 1,2,3,6
 # 10: 1,2,5,10
 # 15: 1,3,5,15
 # 21: 1,3,7,21
 # 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.

# What is the value of the first triangle number to have over five hundred divisors?

import math

def isPrime(m):
    if m == 1:
        return False
    else:
        k =int(math.sqrt(m))
        for i in range(2,k):
            if m % i ==0:
                return False
        return True
    
def numberOfDivisors(n):
    """
    this function returns the number of divisors n has
    for any number N, we have N = p1^e1+p2^e2+...+pn^en(p1~pn are prime factorsof N.)
    the number of divisors N = (e1+1)*(e2+1)*(e3+1)*...*(en+1)
    """
    total = 1
    i = 2
    while True:
        count = 1
        if isPrime(i) == True:
            while n % i == 0:
                count += 1
                n = n/i
            total = total * count
        if n == 1:
            break
        i += 1
    return total

def triangleNumHavefactors(upto):
    """
    gives triangle number with at least upto factors
    """
    n = 1
    while True:
        triNum = 0
        for i in range(n+1):
            triNum += i
        if numberOfDivisors(triNum) < upto:
            n += 1
        else:
            break
    return triNum

print(triangleNumHavefactors(500))
                
